#!/usr/bin/env python2

# Level7 - Heap Overflow Analysis
# Need to find how to redirect execution to function m()

import struct

print "=== Level7 Heap Overflow Analysis ==="
print

# Key addresses from disassembly
m_function = 0x080484f4       # Function m() - target function with printf()
global_buffer = 0x8049960     # Buffer where fgets() stores the flag

print "Function m(): 0x%08x" % m_function
print "Global buffer: 0x%08x" % global_buffer
print

# Heap allocation pattern:
# malloc(8) -> node1 structure  
# malloc(8) -> node1->data buffer
# malloc(8) -> node2 structure
# malloc(8) -> node2->data buffer

print "Heap allocation pattern:"
print "1. node1 structure (8 bytes): value=1, data=ptr"  
print "2. node1->data buffer (8 bytes): strcpy(argv[1]) destination"
print "3. node2 structure (8 bytes): value=2, data=ptr"
print "4. node2->data buffer (8 bytes): strcpy(argv[2]) destination"
print

# Key vulnerability: strcpy can overflow 8-byte allocations
print "Vulnerabilities:"
print "- strcpy(node1->data, argv[1]) - no bounds checking"
print "- strcpy(node2->data, argv[2]) - no bounds checking"
print

# Attack strategy analysis
print "Attack vectors to investigate:"
print "1. Overflow node1->data to corrupt node2 structure"
print "2. Overflow node2->data to corrupt heap metadata"
print "3. Look for function pointers in heap structures"  
print "4. Check if there are destructors/exit functions called"
print

# Common heap exploitation techniques
print "Potential redirection methods:"
print "- Function pointer overwrite (need to find where)"
print "- GOT overwrite via heap corruption"
print "- Exit handler corruption"
print "- Heap metadata corruption for arbitrary write"

print
print "Next steps:"
print "1. Find exact heap layout with GDB"
print "2. Identify where execution can be redirected"  
print "3. Calculate precise overflow sizes"
print "4. Test different attack vectors"